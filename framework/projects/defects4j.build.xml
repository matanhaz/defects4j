<!--
Copyright (c) 2014-2017 RenÃ© Just, Darioush Jalali, and Defects4J contributors.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

################################################################################
                     This is the main Defects4J build file.

It defines properties and targets valid for all projects. It also imports the
build file that defines all export targets (defect4j.export.xml) and the
project-specific build file ("project_id"/"project_id".build.xml) for the
"project_id" (Lang, Math, etc.) of the checked-out project version.
#############################################################################-->
<project name="Defects4J" basedir="${basedir}">
    <!-- Ensure basedir is properly set -->
    <property name="d4j.workdir" value="${basedir}" />
    <property name="d4j.properties" value="defects4j.build.properties" />
    <fail message="Directory ${d4j.workdir} is not a Defects4J working directory!">
        <condition>
            <not> <available file="${d4j.workdir}/${d4j.properties}" /> </not>
        </condition>
    </fail>
    <!-- Check whether d4j.home is set -->
    <fail message="Property d4j.home not set!" unless="d4j.home" />

    <!-- The default location for the projects meta data -->
    <property name="d4j.dir.projects" value="${d4j.home}/framework/projects" />

    <taskdef resource="net/sf/antcontrib/antlib.xml"
            classpath="${d4j.home}/framework/lib/ant-contrib.jar"/>

    <!-- Dependencies used by all projects -->
    <property name="junit.jar"  value="${d4j.home}/framework/projects/lib/junit-4.11.jar"/>
    <property name="cobertura.jar" value="${d4j.home}/framework/projects/lib/cobertura-2.0.3.jar"/>

    <!-- Location of libraries of test generation tool-->
    <property name="d4j.dir.lib.testgen.gen" value="${d4j.home}/framework/lib/test_generation/generation"/>
    <!-- Location of runtime libraries of test generation tools-->
    <property name="d4j.dir.lib.testgen.rt" value="${d4j.home}/framework/lib/test_generation/runtime"/>
    <!-- All runtime libraries of test generation tools (necessary to run generated tests)-->
    <path id="d4j.lib.testgen.rt">
        <fileset dir="${d4j.dir.lib.testgen.rt}" includes="*-rt.jar" />
    </path>

    <!-- Location of customized JUnit formatter-->
    <property name="formatter.jar" value="${d4j.home}/framework/lib/formatter.jar"/>
    <!-- Directory of compiled test-gen classes -->
    <property name="d4j.dir.classes.testgen" value="${d4j.workdir}/.classes_testgen"/>
    <!-- Directory of instrumented classes (e.g., for coverage analysis)-->
    <property name="d4j.dir.classes.instrumented" value="${d4j.workdir}/.classes_instrumented"/>
    <!-- Directory of mutated classes-->
    <property name="d4j.dir.classes.mutated" value="${d4j.workdir}/.classes_mutated"/>
    <!-- Directory of coverage reports-->
    <property name="d4j.dir.coverage.report" value="${d4j.workdir}" />
    <!-- Data file that holds coverage information-->
    <property name="d4j.file.cobertura.ser" value="cobertura.ser" />

    <!-- Additional properties such as tests to exclude.
         This property file is automatically generated. -->
    <property file="${d4j.workdir}/${d4j.properties}"/>

    
    <!-- Include project-specific build file -->
    <import file="${d4j.dir.projects}/${d4j.project.id}/${d4j.project.id}.build.xml"/>

<!--
    Run developer-written tests
-->
    <target name="run.dev.tests" depends="compile-tests" description="Run unit tests">
	    <!-- Format path -->
    <pathconvert pathsep="${line.separator}|   |-- "             
        property="echo.path.compile"             
        refid="all.manual.tests">
    </pathconvert>
    <echo>${echo.path.compile}</echo>

        <junit printsummary="yes" haltonfailure="no" haltonerror="no" fork="no" showOutput="true">
            <classpath>
                <!-- Make sure that instrumented classes appear at the beginning of the
                     classpath -->
                <pathelement location="${d4j.dir.classes.instrumented}" />
                <pathelement path="${formatter.jar}" />
                <pathelement path="${cobertura.jar}" />
                <path refid="d4j.test.classpath"/>
            </classpath>

            <sysproperty key="OUTFILE" value="${OUTFILE}"/>
            <formatter classname="edu.washington.cs.mut.testrunner.Formatter" usefile="false" />
            <test name="${test.entry.class}" methods="${test.entry.method}" if="test.entry.class" />
            <batchtest unless="test.entry.class">
                <fileset refid="all.manual.tests" />
            </batchtest>
        </junit>
		
        <!-- fail build in case we are running all classes, but there are none in the fileset -->
        <if> <not> <isset property="test.entry.class" /> </not> <then>
            <pathconvert refid="all.manual.tests" property="fileset.notempty" setonempty="false" />
            <fail unless="fileset.notempty" message="Test is running with empty fileset " />
        </then> </if>
    </target>

</project>
